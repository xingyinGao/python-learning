# -*- coding: utf-8 -*-
"""
Created on Wed Jan  9 12:55:53 2019

@author: xingyinGao
"""

class SQAlogrithm(object):
    
    def __init__(self,seq):
        
        self._list=seq
        self.num=0
        
    def Insert_sort(self):
        """
        直接插入排序,O(n^2),实际比较次数n(n-1)/2,移动次数(n+4)(n-2)/2；
        将一个元素插入已排序序列中；
        """
        length=len(self._list)
        
        for i  in range(1,length):
            
            if self._list[i]<self._list[i-1]:
                
                insert_value=self._list[i]
                self._list[i]=self._list[i-1]
                j=i-1
                while j>0 and self._list[j]>insert_value:
                    self._list[j+1]=self._list[j]
                    j-=1
                
                self._list[j+1]=insert_value
                
    def Shell_sort(self):
        """
        希尔排序，插入排序的改进，又叫缩小增量排序；
        """
        length=len(self._list)    
        increment=length
        
        while increment !=1:
            increment=int(increment/3)+1
            for i in range(increment,length):
                if self._list[i]<self._list[i-increment]:
                    temp=self._list[i]
                    j=i-increment
                    while j>=0 and temp<self._list[j]:
                        self._list[j+increment]=self._list[j]
                        j=j-increment
                    self._list[j+increment]=temp
                    
    def Bubble_sort(self):
        """
        冒泡排序，O(n^2),实际比较次数n(n-1)/2；
        元素间两两比较，如反序则交换，否则不交换；
        """
        length=len(self._list)
        
        for i in range(length):
            
            j=length-1
            while j>i:
                
                if self._list[j-1]>self._list[j]:
                
                    self._list[j-1]=self._list[j-1]^self._list[j]
                    self._list[j]=self._list[j-1]^self._list[j]
                    self._list[j-1]=self._list[j-1]^self._list[j]
                j-=1
            
    def Quick_sort(self):
        """
        冒泡排序的改进，
        """
        start=0
        end=len(self._list)-1
        
        def iter_quick_sort(in_start,in_end):
            
            if in_start<in_end:
                
                split_point=Quick_sort_main(in_start,in_end)
                
                iter_quick_sort(in_start,split_point-1)
                iter_quick_sort(split_point+1,in_end)
            
        def Quick_sort_main(start,end):
            
            while start<end:
                while start<end:
                    if self._list[end]>=self._list[start]:
                        end-=1
                    else:
                        self._list[end]=self._list[end]^self._list[start]
                        self._list[start]=self._list[end]^self._list[start]
                        self._list[end]=self._list[end]^self._list[start]
                        
                        break
                print('start1:',start)
                print('end:',end)    
                while start<end:
                    if self._list[start]<=self._list[end]:
                        start+=1
                    else:
                        self._list[end]=self._list[end]^self._list[start]
                        self._list[start]=self._list[end]^self._list[start]
                        self._list[end]=self._list[end]^self._list[start]
                        break
                print('start2:',start)
            return start
          
        iter_quick_sort(in_start=start,in_end=end)
        
    def Select_sort(self):
            """
            选择排序：O(n^2)，
            对尚未排序的序列部分，进行遍历，依次比较，记录最小值，将该值放到该次遍历序列最前方；
            """           
            length=len(self._list)
            i=0
            
            while i <length:
                
                temp=i
                for j in range(i+1,length):
                    if self._list[j]<self._list[temp]:
                        temp=j
                if i!=temp:
                    self._list[i]=self._list[i]^self._list[temp]
                    self._list[temp]=self._list[i]^self._list[temp]
                    self._list[i]=self._list[i]^self._list[temp]
    
                i+=1             
                    
    def Merge_sort(self):
        
        start=0
        end=len(self._list)
        
        def _split(_list,_start,_end):
            
            if len(_list[_start:_end])==1:
                return
            mid=int(len(_list[_start:_end])/2)+_start
            print(_start,mid,_end)
            _split(_list,_start,mid)
            _split(_list,mid,_end)
            
            union(_list,_start,mid,_end)
            
        def union(_list,start,mid,end):
            
            new=[]
            length_left=len(self._list[start:mid])
            length_right=len(self._list[mid:end])
            i=j=0
            while i<length_left and j<length_right:
                if self._list[start:mid][i]<=self._list[mid:end][j]:
                    new.append(self._list[start:mid][i])
                    i+=1
                else:
                    new.append(self._list[mid:end][j])
                    j+=1
            while i<length_left:
                new.append(self._list[start:mid][i])
                i+=1
            while j<length_right:
                new.append(self._list[mid:end][j])
                j+=1
            self._list[start:end]=new
         
        _split(self._list,start,end)
            
            
            
            
